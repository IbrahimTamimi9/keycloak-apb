- name: create deployment config
  openshift_v1_deployment_config:
    name: keycloak
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak
    replicas: 1
    selector:
      app: keycloak
      service: keycloak
    spec_template_metadata_labels:
      app: keycloak
      service: keycloak
    containers:
    - env:
      - name: KEYCLOAK_USER
        value: '{{ ADMIN_NAME }}'
      - name: KEYCLOAK_PASSWORD
        value: '{{ ADMIN_PASSWORD }}'
      image: docker.io/jimmidyson/keycloak-openshift:2.5.4.Final
      name: keycloak
      ports:
      - container_port: 8080
        protocol: TCP


- name: create keycloak service
  k8s_v1_service:
    name: keycloak
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak
    selector:
      app: keycloak
      service: keycloak
    ports:
      - name: web
        port: 80
        target_port: 8080

- name: create keycloak route
  openshift_v1_route:
    name: keycloak
    namespace: '{{ namespace }}'
    labels:
      app: keycloak
      service: keycloak
    to_name: keycloak
    spec_port_target_port: web

- name: "Retrieve route to keycloak"
  shell: "oc get routes keycloak -n '{{ namespace }}' | grep -v NAME | awk '{print $2}'"
  register: keycloak_route

- name: Create keycloak admin template
  template:
    src: admin-secret.yml.j2
    dest: /tmp/admin-secret.yml

- name: Create keycloak secret
  shell: oc create -f /tmp/admin-secret.yml

- name: delete secret template file
  file: path=/tmp/admin-secret.yml state=absent

- name: "Generate keycloak auth token"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ ADMIN_NAME }}&password={{ ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

-
  name: "Create {{ namespace }} realm"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms"
    method: POST
    body: "{\"id\": \"{{ namespace }}\", \"realm\": \"{{ namespace }}\", \"displayName\": \"{{ namespace }}\" }"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Generate Username
  shell: tr -d -c "a-zA-Z" < /dev/urandom | head -c 20
  register: generated_username

-
  name: Generate Password
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_password


-
  name: "Create {{ generated_username.stdout }} client in realm {{ namespace }}"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ generated_username.stdout }}\", \"secret\": \"{{ generated_password.stdout }}\"}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: "Create {{ generated_username.stdout }}-bearer client in realm {{ namespace }}"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ generated_username.stdout }}-bearer\", \"secret\": \"{{ generated_password.stdout }}\",\"bearerOnly\":true}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Get installation details bearer
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients/{{ generated_username.stdout }}-bearer/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_bearer

-
  name: Get installation details
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients/{{ generated_username.stdout }}/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_text

- set_fact: installation="{{ installation_text.content | from_json }}"
- set_fact: installationbearer="{{ installation_bearer.content | from_json }}"

- name: Create bearer content file from template
  template:
    src: public-installation-content.json.j2
    dest: /tmp/public-installation-content.json

- name: Print bearer content file
  shell: cat /tmp/public-installation-content.json
  register: installation_content

- set_fact: installation="{{ installation_content.stdout | from_json }}"

- name: Create keycloak public client template
  template:
    src: public-client.yml.j2
    dest: /tmp/client-raw.yaml

- name: Create keycloak bearer client template
  template:
    src: bearer-client.yml.j2
    dest: /tmp/bearer-client-raw.yaml

- name: check file contents
  shell: cat /tmp/bearer-client-raw.yaml
  register: client_raw

- debug: var=client_raw.stdout

- name: Create keycloak public client secret
  shell: oc create -f /tmp/bearer-client-raw.yaml

- name: delete secret template file
  file: path=/tmp/bearer-client-raw.yaml state=absent


- name: check file contents
  shell: cat /tmp/client-raw.yaml
  register: bind_raw

- debug: var=bind_raw.stdout

- name: Create keycloak public client secret
  shell: oc create -f /tmp/client-raw.yaml

- name: delete secret template file
  file: path=/tmp/client-raw.yaml state=absent
