-
  name: Generate Username
  shell: tr -d -c "a-zA-Z" < /dev/urandom | head -c 20
  register: generated_username

-
  name: Generate Password
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_password

- 
  name: "Retrieve route to keycloak"
  shell: "oc get routes keycloak -n '{{ namespace }}' | grep -v NAME | awk '{print $2}'"
  register: keycloak_route

- name: "Generate keycloak auth token"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ provision_params.ADMIN_NAME }}&password={{ provision_params.ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

-
  name: "Create {{ bind_params.service }}-bearer client in realm {{ namespace }}"
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ bind_params.service }}-bearer\", \"secret\": \"{{ generated_password.stdout }}\",\"bearerOnly\":true}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Get installation details bearer
  uri:
    url: "http://{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients/{{ bind_params.service }}-bearer/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_bearer


- set_fact: installation="{{ installation_bearer.content | from_json }}"
- set_fact: installationbearer="{{ installation_bearer.content | from_json }}"

- name: Create keycloak bearer template
  template:
    src: bind.json.j2
    dest: /tmp/bind-raw.json

- name: check file contents
  shell: cat /tmp/bind-raw.json
  register: bind_raw

- debug: var=bind_raw.stdout

- name: Encode bind details
  shell: "cat /tmp/bind-raw.json | base64 -w 0 > /var/tmp/bind-creds"